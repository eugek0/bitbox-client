/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as StarterIndexImport } from './routes/starter/index'
import { Route as StorageMyImport } from './routes/storage/my'
import { Route as StorageUserIdImport } from './routes/storage/$userId'
import { Route as StarterLoginImport } from './routes/starter/login'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StarterIndexRoute = StarterIndexImport.update({
  path: '/starter/',
  getParentRoute: () => rootRoute,
} as any)

const StorageMyRoute = StorageMyImport.update({
  path: '/storage/my',
  getParentRoute: () => rootRoute,
} as any)

const StorageUserIdRoute = StorageUserIdImport.update({
  path: '/storage/$userId',
  getParentRoute: () => rootRoute,
} as any)

const StarterLoginRoute = StarterLoginImport.update({
  path: '/starter/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/starter/login': {
      id: '/starter/login'
      path: '/starter/login'
      fullPath: '/starter/login'
      preLoaderRoute: typeof StarterLoginImport
      parentRoute: typeof rootRoute
    }
    '/storage/$userId': {
      id: '/storage/$userId'
      path: '/storage/$userId'
      fullPath: '/storage/$userId'
      preLoaderRoute: typeof StorageUserIdImport
      parentRoute: typeof rootRoute
    }
    '/storage/my': {
      id: '/storage/my'
      path: '/storage/my'
      fullPath: '/storage/my'
      preLoaderRoute: typeof StorageMyImport
      parentRoute: typeof rootRoute
    }
    '/starter/': {
      id: '/starter/'
      path: '/starter'
      fullPath: '/starter'
      preLoaderRoute: typeof StarterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthLoginRoute,
  AuthRegisterRoute,
  StarterLoginRoute,
  StorageUserIdRoute,
  StorageMyRoute,
  StarterIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/starter/login",
        "/storage/$userId",
        "/storage/my",
        "/starter/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/starter/login": {
      "filePath": "starter/login.tsx"
    },
    "/storage/$userId": {
      "filePath": "storage/$userId.tsx"
    },
    "/storage/my": {
      "filePath": "storage/my.tsx"
    },
    "/starter/": {
      "filePath": "starter/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

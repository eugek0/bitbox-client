/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsSecurityImport } from './routes/settings/security'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as SettingsDevelopmentImport } from './routes/settings/development'
import { Route as SettingsAdministrationImport } from './routes/settings/administration'
import { Route as ProfileUseridImport } from './routes/profile/$userid'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as StorageStorageidIndexImport } from './routes/storage/$storageid/index'
import { Route as AuthRecoverEmailImport } from './routes/auth/recover/email'
import { Route as AuthRecoverUseridImport } from './routes/auth/recover/$userid'
import { Route as StorageStorageidEntityEntityidImport } from './routes/storage/$storageid/entity/$entityid'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSecurityRoute = SettingsSecurityImport.update({
  id: '/settings/security',
  path: '/settings/security',
  getParentRoute: () => rootRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRoute,
} as any)

const SettingsDevelopmentRoute = SettingsDevelopmentImport.update({
  id: '/settings/development',
  path: '/settings/development',
  getParentRoute: () => rootRoute,
} as any)

const SettingsAdministrationRoute = SettingsAdministrationImport.update({
  id: '/settings/administration',
  path: '/settings/administration',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUseridRoute = ProfileUseridImport.update({
  id: '/profile/$userid',
  path: '/profile/$userid',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const StorageStorageidIndexRoute = StorageStorageidIndexImport.update({
  id: '/storage/$storageid/',
  path: '/storage/$storageid/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRecoverEmailRoute = AuthRecoverEmailImport.update({
  id: '/auth/recover/email',
  path: '/auth/recover/email',
  getParentRoute: () => rootRoute,
} as any)

const AuthRecoverUseridRoute = AuthRecoverUseridImport.update({
  id: '/auth/recover/$userid',
  path: '/auth/recover/$userid',
  getParentRoute: () => rootRoute,
} as any)

const StorageStorageidEntityEntityidRoute =
  StorageStorageidEntityEntityidImport.update({
    id: '/storage/$storageid/entity/$entityid',
    path: '/storage/$storageid/entity/$entityid',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/profile/$userid': {
      id: '/profile/$userid'
      path: '/profile/$userid'
      fullPath: '/profile/$userid'
      preLoaderRoute: typeof ProfileUseridImport
      parentRoute: typeof rootRoute
    }
    '/settings/administration': {
      id: '/settings/administration'
      path: '/settings/administration'
      fullPath: '/settings/administration'
      preLoaderRoute: typeof SettingsAdministrationImport
      parentRoute: typeof rootRoute
    }
    '/settings/development': {
      id: '/settings/development'
      path: '/settings/development'
      fullPath: '/settings/development'
      preLoaderRoute: typeof SettingsDevelopmentImport
      parentRoute: typeof rootRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof rootRoute
    }
    '/settings/security': {
      id: '/settings/security'
      path: '/settings/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof SettingsSecurityImport
      parentRoute: typeof rootRoute
    }
    '/auth/recover/$userid': {
      id: '/auth/recover/$userid'
      path: '/auth/recover/$userid'
      fullPath: '/auth/recover/$userid'
      preLoaderRoute: typeof AuthRecoverUseridImport
      parentRoute: typeof rootRoute
    }
    '/auth/recover/email': {
      id: '/auth/recover/email'
      path: '/auth/recover/email'
      fullPath: '/auth/recover/email'
      preLoaderRoute: typeof AuthRecoverEmailImport
      parentRoute: typeof rootRoute
    }
    '/storage/$storageid/': {
      id: '/storage/$storageid/'
      path: '/storage/$storageid'
      fullPath: '/storage/$storageid'
      preLoaderRoute: typeof StorageStorageidIndexImport
      parentRoute: typeof rootRoute
    }
    '/storage/$storageid/entity/$entityid': {
      id: '/storage/$storageid/entity/$entityid'
      path: '/storage/$storageid/entity/$entityid'
      fullPath: '/storage/$storageid/entity/$entityid'
      preLoaderRoute: typeof StorageStorageidEntityEntityidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/settings/administration': typeof SettingsAdministrationRoute
  '/settings/development': typeof SettingsDevelopmentRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/auth/recover/$userid': typeof AuthRecoverUseridRoute
  '/auth/recover/email': typeof AuthRecoverEmailRoute
  '/storage/$storageid': typeof StorageStorageidIndexRoute
  '/storage/$storageid/entity/$entityid': typeof StorageStorageidEntityEntityidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/settings/administration': typeof SettingsAdministrationRoute
  '/settings/development': typeof SettingsDevelopmentRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/auth/recover/$userid': typeof AuthRecoverUseridRoute
  '/auth/recover/email': typeof AuthRecoverEmailRoute
  '/storage/$storageid': typeof StorageStorageidIndexRoute
  '/storage/$storageid/entity/$entityid': typeof StorageStorageidEntityEntityidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/settings/administration': typeof SettingsAdministrationRoute
  '/settings/development': typeof SettingsDevelopmentRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
  '/auth/recover/$userid': typeof AuthRecoverUseridRoute
  '/auth/recover/email': typeof AuthRecoverEmailRoute
  '/storage/$storageid/': typeof StorageStorageidIndexRoute
  '/storage/$storageid/entity/$entityid': typeof StorageStorageidEntityEntityidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/profile/$userid'
    | '/settings/administration'
    | '/settings/development'
    | '/settings/profile'
    | '/settings/security'
    | '/auth/recover/$userid'
    | '/auth/recover/email'
    | '/storage/$storageid'
    | '/storage/$storageid/entity/$entityid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/profile/$userid'
    | '/settings/administration'
    | '/settings/development'
    | '/settings/profile'
    | '/settings/security'
    | '/auth/recover/$userid'
    | '/auth/recover/email'
    | '/storage/$storageid'
    | '/storage/$storageid/entity/$entityid'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/profile/$userid'
    | '/settings/administration'
    | '/settings/development'
    | '/settings/profile'
    | '/settings/security'
    | '/auth/recover/$userid'
    | '/auth/recover/email'
    | '/storage/$storageid/'
    | '/storage/$storageid/entity/$entityid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  ProfileUseridRoute: typeof ProfileUseridRoute
  SettingsAdministrationRoute: typeof SettingsAdministrationRoute
  SettingsDevelopmentRoute: typeof SettingsDevelopmentRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsSecurityRoute: typeof SettingsSecurityRoute
  AuthRecoverUseridRoute: typeof AuthRecoverUseridRoute
  AuthRecoverEmailRoute: typeof AuthRecoverEmailRoute
  StorageStorageidIndexRoute: typeof StorageStorageidIndexRoute
  StorageStorageidEntityEntityidRoute: typeof StorageStorageidEntityEntityidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  ProfileUseridRoute: ProfileUseridRoute,
  SettingsAdministrationRoute: SettingsAdministrationRoute,
  SettingsDevelopmentRoute: SettingsDevelopmentRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsSecurityRoute: SettingsSecurityRoute,
  AuthRecoverUseridRoute: AuthRecoverUseridRoute,
  AuthRecoverEmailRoute: AuthRecoverEmailRoute,
  StorageStorageidIndexRoute: StorageStorageidIndexRoute,
  StorageStorageidEntityEntityidRoute: StorageStorageidEntityEntityidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/profile/$userid",
        "/settings/administration",
        "/settings/development",
        "/settings/profile",
        "/settings/security",
        "/auth/recover/$userid",
        "/auth/recover/email",
        "/storage/$storageid/",
        "/storage/$storageid/entity/$entityid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/profile/$userid": {
      "filePath": "profile/$userid.tsx"
    },
    "/settings/administration": {
      "filePath": "settings/administration.tsx"
    },
    "/settings/development": {
      "filePath": "settings/development.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.tsx"
    },
    "/settings/security": {
      "filePath": "settings/security.tsx"
    },
    "/auth/recover/$userid": {
      "filePath": "auth/recover/$userid.tsx"
    },
    "/auth/recover/email": {
      "filePath": "auth/recover/email.tsx"
    },
    "/storage/$storageid/": {
      "filePath": "storage/$storageid/index.tsx"
    },
    "/storage/$storageid/entity/$entityid": {
      "filePath": "storage/$storageid/entity/$entityid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
